--For Star Schema

-- Customers Dimension Table
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(255),
    LastName VARCHAR(255),
    Age INT
);

-- Products Dimension Table
CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(255)
);

-- Website Interactions Dimension Table
CREATE TABLE WebsiteInteractions (
    InteractionID INT PRIMARY KEY,
    VisitDateTime DATETIME,
    PageName VARCHAR(255),
    Bounce INT,
    UserID INT,
    LandingPage VARCHAR(255),
    TrafficSource VARCHAR(255)
);

-- AB Test Results Dimension Table
CREATE TABLE ABTestResults (
    ExperimentGroup VARCHAR(255),
    Conversion INT
);

-- Order Details Fact Table
CREATE TABLE OrderDetails (
    OrderID INT,
    ProductID INT,
    Price DECIMAL(10, 2),
    Quantity INT,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

-- Sales Fact Table
CREATE TABLE SalesFact (
    SalesFactID INT PRIMARY KEY,
    OrderID INT,
    CustomerID INT,
    ProductID INT,
    OrderDate DATETIME,
    Price DECIMAL(10, 2),
    Quantity INT,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);


-- Populate Customers Table
INSERT INTO Customers (CustomerID, FirstName, LastName, Age)
SELECT DISTINCT CustomerID, FirstName, LastName, Age FROM DB1;

-- Populate Products Table
INSERT INTO Products (ProductID, ProductName)
SELECT DISTINCT ProductID, ProductName FROM Products;

-- Populate WebsiteInteractions Table
INSERT INTO WebsiteInteractions (InteractionID, VisitDateTime, PageName, Bounce, UserID, LandingPage, TrafficSource)
SELECT DISTINCT InteractionID, VisitDateTime, PageName, Bounce, UserID, LandingPage, TrafficSource FROM DB1;

-- Populate ABTestResults Table
INSERT INTO ABTestResults (ExperimentGroup, Conversion)
SELECT DISTINCT ExperimentGroup, Conversion FROM DB1;

-- Populate OrderDetails Table
INSERT INTO OrderDetails (OrderID, ProductID, Price, Quantity)
SELECT DISTINCT OrderID, ProductID, Price, Quantity FROM DB1;

-- Populate SalesFact Table 
INSERT INTO SalesFact (SalesFactID, OrderID, CustomerID, ProductID, OrderDate, Price, Quantity)
SELECT SalesFactID, OrderID, CustomerID, ProductID, OrderDate, Price, Quantity FROM DB1;








-- Data Exploration and Customer Segmentation
-- Identify key tables and explore data
SHOW TABLES;
SELECT * FROM Customers LIMIT 5;

-- Segment customers by age group
SELECT
    CASE
        WHEN Age < 30 THEN 'Under 30'
        WHEN Age >= 30 AND Age < 45 THEN '30-44'
        ELSE '45 and above'
    END AS Age_Group,
    COUNT(*) AS Customer_Count
FROM Customers
GROUP BY Age_Group;

-- Sales Analysis and Customer Lifetime Value (CLV)
-- Analyze sales and calculate CLV
SELECT SUM(Price * Quantity) AS Total_Revenue
FROM Orders;
SELECT AVG(Price * Quantity) AS Avg_Order_Value
FROM Orders;

-- Calculate CLV for each customer
SELECT
    CustomerID,
    SUM(Price * Quantity) AS Total_Spending
FROM Orders
GROUP BY CustomerID
ORDER BY Total_Spending DESC;

-- Web Analytics and Recommendation Engine
-- Analyze website interactions and create a recommendation engine
SELECT
    PageName,
    COUNT(*) AS Page_Views,
    SUM(CASE WHEN Bounce = 1 THEN 1 ELSE 0 END) AS Bounce_Count,
    SUM(CASE WHEN Bounce = 1 THEN 1 ELSE 0 END) / COUNT(*) AS Bounce_Rate
FROM WebsiteInteractions
GROUP BY PageName;

-- Recommend products to a specific customer based on past purchases
SELECT DISTINCT
    P.ProductName AS Recommended_Product
FROM Orders O
JOIN Products P ON O.ProductID = P.ProductID
WHERE O.CustomerID = '12345';

-- A/B Testing and Data Visualization
-- Conduct A/B tests and create data visualizations
SELECT
    ExperimentGroup,
    AVG(Conversion) AS Conversion_Rate
FROM ABTestResults
GROUP BY ExperimentGroup;

-- Reporting and Customer Retention
-- Generate reports and analyze customer retention
-- (Report generation may involve SQL queries for data extraction.)

-- Calculate returning customer rate
SELECT
    COUNT(CASE WHEN Purchase_Count > 1 THEN 1 ELSE NULL END) AS Returning_Customers,
    COUNT(*) AS Total_Customers,
    (COUNT(CASE WHEN Purchase_Count > 1 THEN 1 ELSE NULL END) / COUNT(*)) * 100 AS Returning_Customer_Rate
FROM (
    SELECT
        CustomerID,
        COUNT(*) AS Purchase_Count
    FROM Orders
    GROUP BY CustomerID
) CustomerPurchaseCount;

-- Cart Abandonment Rate and Seasonal Product Demand
-- Analyze cart abandonment rate and seasonal product demand
-- (Additional SQL queries can be added for specific analysis.)

-- Calculate customer churn rate
SELECT
    DATE_FORMAT(Month, '%Y-%m') AS Month,
    (1 - (COUNT(DISTINCT ReturningCustomers) / COUNT(DISTINCT ActiveCustomers))) * 100 AS Churn_Rate
FROM (
    SELECT
        DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
        CustomerID AS ReturningCustomers,
        LAG(CustomerID) OVER (PARTITION BY CustomerID ORDER BY OrderDate) AS ActiveCustomers
    FROM Orders
) CustomerChurnData
GROUP BY Month;
